Sammlung an Input für weitere Fragen, grundlegende Interpretation und Muster des Scrips und dessen Komponenten

Aber auch für uns noch zu klärende Fragen über die Funktionsweise.

######################################################################################################################################################
######################################################################################################################################################

Aufbau:
-) Offene Fragen
  - diff
      - Bedenken zur Diskussion
      - Umsetzung und Alternative
      - Funktionsweise
      - Offene Fragen an uns selbst über Inkonsistenzen
-) Funktion des restlichen Skriptes
  - Leitfehler detection
  - Score Berechnung
-) Features zur Implementierung
  - Soll
    X Code Vollständigkeit und Kohärenz: Fehlende Elemente und unklare Elemente überarbeiten
    X Code Integrität: Fehler Kontrolle und Chunk by Chunk Input durch beide Versionen jagen und Vergleichen
    - Alternative Preprocessing Pipeline für coco Format
    - Wortablage und Indexierung von Elementen (Wörtern, wie Texten) im coco Format (check specs at the bottom of the file)
    - Methode des Text Vergleichs im coco Format
    - Fehler bei keinem Input
  - Nice to have
    - Fehler bei Input im non-coco Format (böse באַבאַלז!)
    - preprocessing verbesser - eg. punkte hinzunehmen
    X bessere coding practice - nicht alles in einer Funktion
    - Aktivsetzung/Umsetzung der inaktiven Elemente, bessere Umsetzung von cut?

-) Blick auf die Package Methoden, Variablen und Parameter
-) Beispiel Input + Output
-) Variablendefinitionen (draft)

######################################################################################################################################################
######################################################################################################################################################

##########################################Questions for the session:##############################################################################

1.) functions of diff: 
is it only there for the allignment/collation of text or is it a necessary step in the calculatiuon of difference 
(most likely the latter, based on our interpretation so far and the comments in the script)
Result: 
Either argue our case for keeping diff or find an alternative

****************************************************************
Outside Input:
Use more efficient algorithms. The 'diff' function from the 'Algorithm::Diff' module can be slow for large lists of words.
Consider using a more efficient algorithm, such as the 'Levenshtein distance' or the 'Longest Common Subsequence' (LCS) algorithm,
to compare the lists of words. The 'LCS' function from the 'Algorithm::Diff' module can be used to calculate the LCS of two lists of words.
****************************************************************

In case of it's importance and retention:
-)Comparison of the variants and reverse engineer a correct application
-)Be more persistent and precise in our search for difflib application examples for our purposes

********************************************************************************************************************************

The point of diff was to align the texts, and there are two things that make it obsolete:

- We have better tools for text alignment, such as CollateX
- Many scholars will already have aligned the texts and won't want their collations to be disregarded.

So your version should either take an existing alignment (such as a CollateX output or a spreadsheet) 
and skip diff altogether, or have an option for collating the input texts before handing them off to the Leitfehler-detection part.

********************************************************************************************************************************

Nach dem Durchgehen des Skriptes, ist die Antwort hierauf ein beherztes: Jein

Diff wird nicht in seiner angedachten Funktion zum exakten Verweisen auf Differenzen verwedent, es wird nur der Teil des Outputs weiterverwendet,
welcher die Sequenzen beinhaltet und die Anzahl der abweichenden Sequenzen wird festgehalten und mitgezählt.

Womöglich würde es alternative Lösungen geben, in wiefern das jedoch ein Problem für die Verwender im Bezug auf ihre Collation darstellt,
erschließt sich mir nicht ganz. Collationen kannst du zwar nicht als Input verwenden, aber es werden weder welche erzeugt, 
noch sind diese deshalb zu verwerfen.


####################################How is diff used? A closer look at it:#######################################################################

"The program has a function called dodiff that takes two arrays of words as input and returns an integer representing
the difference between the two arrays.

For example, given the following two text sequences:
Sequence 1: "The quick brown fox jumps over the lazy dog."
Sequence 2: "The slow brown fox jumps over the lazy cat."
The diff function would return the following list of differences:
[
['-', 0, 'quick'],
['+', 0, 'slow'],
[' ', 4, 'brown'],
[' ', 14, 'dog'],
['+', 14, 'cat']
]

This function uses the diff function from the Algorithm::Diff module to compute the smallest
set of additions and deletions necessary to turn the first array of words into the second. The dodiff function then returns the number 
of differences found. The main part of the program iterates over all pairs of manuscripts, calling the dodiff function on their respective arrays
of words to compute their difference, and outputs the result to the console. "

The script prints the length of the array of manuscript labels and the labels themselves. It then compares the contents of each manuscript
to the contents of every other manuscript that precedes it in the array. For each comparison, it calls the subroutine dodiff(), which uses the
Algorithm::Diff module to compute the smallest set of additions and deletions necessary to transform the first sequence (the contents of the first 
manuscript) into the second sequence (the contents of the second manuscript).

########################################Offene_Frage_an_uns_selbst################################################################################

Wird LCS wirklich im Script verwendet, oder gibt es nur eine Function innerhalb des diff packages dafür? 
Wenn nein, wäre es eine gangbare Alternative?

################################Willkürliche_Reinlegungen in den restlichen Code##################################################################

Input:
The script starts by reading in the input, which consists of lines containing labels for the manuscripts followed by the contents of the manuscripts.
The script processes the input by removing punctuation, converting words with a *-wildcard to "€", and removing any text within parentheses or brackets.
It also stores the labels and contents of the manuscripts in two arrays, one for the labels and one for the contents, and counts the number of manuscripts.


####################################Leitfehler detection:#########################################################################################

This is done by counting the number of times each word appears in each manuscript and comparing these counts between pairs of manuscripts.

Ideen dazu:
Wörter die insgesamt weniger als zweimal innerhalb von zwei verglichenen Manuskripten vorkommen und hierbei in beiden nicht gleich oft, 
werden als Kandidaten herangezogen.
Hierbei werden zwei Counter bespielt, ein globaler und einer für jede spezische Manuskript kombination, 
um in einer Abstimmung zur Eingnung von Termen zum Schluss zu dienen.
Paare an Leitfehler, die nur in wenigen Texten vorkommen, werden höher bewertet.

ur, which stores the scores for each leitfehler candidate,
the scores in %ur are then normalized by dividing them by the number of occurrences of
each leitfehler candidate in the manuscripts, and the resulting values are stored in a hash map called %score

scoremax=1? -> nur bi-parte Bäume, kein Mehrfachvorkommen von Leitfehlern?

The script then calls the subroutine wlist(), which calculates a score for each word in the manuscripts based on the number of manuscripts
in which it appears and its global frequency in the manuscripts. It also calculates a scoremax value, which is the maximum score among all the words.

################################GeneralUse_plus_Calculate_Score####################################################################################

#to be finished after the first in depth sighting

Calculate score:
The code first initializes a few variables:
leit_hash, leit_hash_count, leit_hash_ms, leit_array, and global_leit. 
These variables are used to store information about the leitfehler (differences or errors) identified in the text sequences.
The code then :
iterates through the list of differences returned by the diff function and uses it to populate the leit_hash and leit_hash_count variables. 
The leit_hash variable stores the number of occurrences of each leitfehler,
while 
the leit_hash_count variable stores the total number of occurrences of each leitfehler across all text sequences.

The code then sorts the leit_hash variable by the number of occurrences of each leitfehler in descending order 
and selects the top 20 leitfehler. 
It stores the selected leitfehler in the leit_array variable.
The code then iterates
through the leit_array variable and uses it 
to populate the leit_hash_ms variable, which
stores the positions of each leitfehler in the text sequences.
The code then sorts
 the leit_array variable by the number of occurrences of each leitfehler in descending order.
The code then iterates
through the leit_array variable again and uses it to 
calculate the weight of each leitfehler.
The weight of each leitfehler is calculated as the 
                                                product of the weight variable (which is set to 20) and the total number of occurrences of .... ????????


################################Package_methoden und variablen####################################################################################

The rating function:
takes in five input arguments and returns the minimum of the first three arguments.
The ratings function:
takes in five input arguments and returns the difference between the length of the @msLabelArray array and
the maximum and minimum of the first three input arguments.


The diff function:
from the Algorithm::Diff module is used to compute the smallest set of additions and deletions necessary to turn one
sequence of words into another.

The sdiff function from the Algorithm::Diff module is used to compute the differences between two sequences of words and return a list
of differences with respect to one of the sequences.

The LCS function from the Algorithm::Diff module is used to compute the longest common subsequence between two sequences of words.

The traverse_sequences function from the Algorithm::Diff module is used to traverse the differences between two sequences of words 
and perform an action on each difference.

The traverse_balanced function from the Algorithm::Diff module is used to traverse the differences between two sequences of words in 
a balanced way and perform an action on each difference.

The min function from the List::Util module is used to find the minimum value in a list of values.

The max function from the List::Util module is used to find the maximum value in a list of values.



'$weight': This variable is a weight that is applied to the scores of the differences between lists of words. 
The script counts the differences 
between lists of words multiple times, with the best differences being counted '$weight' times and the others being counted proportionally down to 1.

$cut': This variable is a threshold for the 'globalLeit' function

################################MISC############################################################################################################


Input, Output:
The script expects input in the following format:

Each line of the input consists of a label consisting of three characters and seven spaces, followed by a list of words.
The label is used to identify the list of words that follows.
The input may contain multiple lines, each with a label and a list of words.

Here is an example of input for the script:

abc       this is a list of words
def       this is another list of words
ghi       this is yet another list of words


The script will output the number of lists of words, followed by the labels of the lists of words 
and the number of differences between each pair of lists.

Here is an example of output for the input above:

3
abc       def       ghi       
def       2  1 
ghi       1  2 


The output indicates that there are 3 lists of words ('abc', 'def', and 'ghi'), and that the number of differences 
between each pair of lists is as follows:

'abc' and 'def': 2 differences
'abc' and 'ghi': 1 difference
'def' and 'ghi': 2 differences

#####################################################Questionable_variable Explanations_to_rework#################################################

The script has several parameters that control its behavior:

'$debug': This variable determines the level of debugging output that the script will produce. It can be set to 0, 1, 2, or 3. The higher the value, the more detailed the debugging output will be.

'$cut': This variable is a threshold for the 'globalLeit' function (which is not used in the script). It is currently not used in the script.

'$weight': This variable is a weight that is applied to the scores of the differences between lists of words. The script counts the differences between lists of words multiple times, with the best differences being counted '$weight' times and the others being counted proportionally down to 1.

'$scoremax': This variable is not used in the script.

'%ur': This is an empty hash that is not used in the script.

'%score': This is an empty hash that is not used in the script.

'%mssHash': This is a hash that stores the lists of words and their labels. The keys of the hash are the labels and the values are the lists of words.

'@msLabelArray': This is an array that stores the labels of the lists of words. The index of each label in the array corresponds to the position of the list of words in the input.


############Update_090123##########################
output from diff = nested lists because for each hunk a separate element

just compare row by row of collated text -> look at differences -> then score them

handle optional input as regex for substitution of terms?

question: how are blank spaces treated by collation?

error handling für leeren Input + Input in falschem Format (Zeilen - Spalten, nicht cocolatiert)

import string package als alternative zu diff?
